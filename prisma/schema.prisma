generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  firstName    String?
  lastName     String?
  userName     String      @unique
  email        String      @unique
  phoneNumber  String?
  password     String
  snsKey       String?
  bio          String?
  profilePhoto String?
  recipes      Recipe[]
  dips         String[]
  mecipes      Mecipe[]
  stars        Star[]
  starCount    Int         @default(0)
  totalStar    Float       @default(0)
  comments     Comment[]
  recomments   Recomment[]
  rooms        Room[]
  messages     Message[]
  subscribers  User[]      @relation("Subscribtion", references: [id])
  subscribings User[]      @relation("Subscribtion", references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Recipe {
  id          String       @id @default(uuid())
  userId      String
  chef        User         @relation(fields: [chefId], references: [id])
  chefId      String
  dipsCount   Int          @default(0)
  title       String       @unique @default("")
  caption     String?
  thumbNails  String[]
  servings    Int          @default(1)
  difficulty  Int          @default(1)
  cookingTime Int          @default(0)
  comments    Comment[]
  stars       Star[]
  totalStar   Float        @default(0)
  toDos       ToDo[]
  kategories  Kategorie[]
  ingredients Ingredient[]
  hashtags    HashTag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ToDo {
  id       String  @id @default(uuid())
  recipe   Recipe  @relation(fields: [recipeId], references: [id])
  recipeId String
  file     String?
  title    String
  caption  String?
  isTimer  Boolean
  time     Int?    @default(0)
  step     Int
}

model Mecipe {
  id          String  @id @default(uuid())
  originalId  String
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  chefId      String
  memo        String?
  servings    Int?
  difficulty  Int?
  cookingTime Int?
  meDos       MeDo[]
}

model MeDo {
  id         String  @id @default(uuid())
  mecipe     Mecipe  @relation(fields: [mecipeId], references: [id])
  mecipeId   String
  originalId String
  memo       String?
  isTimer    Boolean
  time       Int?    @default(0)
  step       Int
}

model Kategorie {
  id        String   @id @default(cuid())
  kategorie String   @unique
  recipes   Recipe[]
}

model Ingredient {
  id         String   @id @default(cuid())
  ingredient String   @unique
  recipes    Recipe[]
}

model HashTag {
  id        String   @id @default(uuid())
  hashtag   String   @unique
  recipes   Recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Star {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String
  star      Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([recipeId, userId])
}

model Comment {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  recipe     Recipe      @relation(fields: [recipeId], references: [id])
  recipeId   String
  content    String
  recomments Recomment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Recomment {
  id        Int      @id @default(autoincrement())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id        String    @id @default(uuid())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
